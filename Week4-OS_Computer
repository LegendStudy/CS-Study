# 3.1 운영체제와 컴퓨터

## 3.1.1 운영체제의 역할과 구조

### 운영체제의 역할

1. **CPU 스케줄링과 프로세스 관리**
    
    CPU 소유권을 어떤 프로세스에 할당할지, 프로세스의 생성과 삭제, 자원 할당 및 반환을 관리합니다.
    
2. **메모리 관리**
    
    한정된 메모리를 어떤 프로세스에 얼마큼 할당해야 하는지 관리합니다.
    
3. **디스크 파일 관리**
    
    디스크 파일을 어떠한 방법으로 보관할지 관리합니다.
    
4. **I/O 디바이스 관리**
    
    I/O 디바이스들인 마우스, 키보드와 컴퓨터 간에 데이터를 주고받는 것을 관리합니다.
    

### 운영체제의 구조


운영체제의 구조

GUI, 시스템콜, 커널, 드라이버 부분이 바로 운영체제를 지칭한다.

GUI가 없고 CUI만 있는 리눅스 서버도 있다.

> 드라이버
> 
> 
> : 하드웨어를 제어하기 위한 소프트웨어
> 

### 시스템콜

**운영체제가 커널에 접근하기 위한 인터페이스**, 유저 프로그램이 운영체제의 서비스를 받기 위해 **커널 함수**를 호출할 때 사용한다.

유저 프로그램이 I/O 요청으로 트랩(trap)을 발동하면 올바른 I/O 요청인지 확인한 후 **유저 모드가 시스템 콜을 통해 커널 모드로 변환**되어 실행된다. 

예를 들어, I/O 요청인 fs.readFile() 이라는 파일 시스템의 파일을 읽는 함수가 발동했다고 해보자.


시스템 콜

유저 모드에서 파일을 읽지 않고 **커널 모드로 들어가 파일을 읽고 다시 유저 모드로 돌아가** 그 뒤에 있는 유저 프로그램의 로직을 수행한다. 이 과정을 통해 컴퓨터 자원에 대한 직접 접근을 차단할 수 있고 프로그램을 다른 프로그램으로부터 보호할 수 있다.

> I/O 요청
> 
> 
> : 입출력 함수, 데이터베이스, 네트워크, 파일 접근 등에 관한 일
> 


시스템콜과 커널, 운영체제

위의 그림처럼 프로세스나 스레드에서 운영체제로 어떠한 요청을 할 때 시스템이라는 인터페이스와 커널을 거쳐 운영체제에 전달된다.

시스템콜은 추상화 계층으로, 네트워크 통신이나 데이터베이스와 같은 낮은 단계의 영역 처리에 대한 부분을 많이 신경쓰지 않고 프로그램을 구현할 수 있다는 장점이 있다.

### modebit

시스템콜이 작동될 때 modebit을 참고해서 유저 모드와 커널모드를 구분한다. modebit은 1또는 0의 값을 가지는 플래그 변수이다.

I/O 디바이스는 운영체제를 통해서만 동작해야 한다. 
만약 유저 모드를 기반으로 카메라가 켜진다면, 사용자가 의도하지 않았는데 공격자가 카메라에 접근할 수 있다.
물론 커널 모드를 거쳐 운영체제를 통해 작동한다고 해도 100% 막을 수는 없지만, 운영체제를 통해 작동하게 해야 막기가 쉽다. 

modebit 0: 커널 모드 / 1: 유저 모드


modebit의 역할

> 유저 모드
: 유저가 접근할 수 있는 영역을 제한적으로 두며 컴퓨터 자원에 함부로 침범하지 못하는 모드
> 

> 커널 모드
: 모든 컴퓨터 자원에 접근할 수 있는 모드
> 

<aside>
⭐ **커널**
: **운영체제의 핵심 부분**이자 시스템콜 인터페이스를 제공하며 보안, 메모리, 프로세스, 파일 시스템, I/O 디바이스, I/O 요청 관리 등 운영체제의 중추적인 역할을 한다.

</aside>

---

## 3.1.2 컴퓨터의 요소

컴퓨터는 CPU, DMA 컨트롤러, 메모리, 타이머, 다바이스 컨트롤러 등으로 이루어져 있다.


컴퓨터의 요소

### CPU

**CPU**(Central Processing Unit)는 **산술논리연산장치**, **제어장치**, **레지스터로** 구성되어 있는 컴퓨터 장치이다.

**인터럽트**에 의해 단순히 메모리에 존재하는 명령어를 해석해서 실행하는 일꾼이다.

운영체제의 커널이 프로그램을 메모리에 올려 프로세스로 만들면 CPU가 이를 처리한다.

- **제어장치**
    
    제어장치(CU, Control Unit)는 프로세스 조작을 지시하는 CPU의 한 부품이다. 입출력장치 간 통신을 제어하고 명령어들을 읽고 해석하며 데이터 처리를 위한 순서를 결정한다.
    
- **레지스터**
    
    레지스터는 CPU 안에 있는 매우 빠른 임시기억장치를 말한다. CPU와 직접 연결되어 있으므로 연산 속도가 메모리보다 매우 빠르다. CPU는 자체적으로 데이터를 저장할 방법이 없기 때문에 레지스터를 거쳐 데이터를 전달한다.
    
- **산술논리연산장치**
    
    산술논리연산장치(ALU, Arithmetic Logic Unit)는 덧셈, 뺄셈 같은 두 숫자의 산술 연산과 배타적 논리합, 논리곱 같은 논리 연산을 계산하는 디지털 회로다.
    
- **CPU의 연산 처리**
    1. 제어장치가 메모리에 계산할 값을 로드한다. 또한, 레지스터에도 로드한다.
    2. 제어장치가 산술논리연산장치에게 레지스터에 있는 값을 계산하라고 명령한다.
    3. 제어장치가 레지스터에서 메모리로 계산된 값을 저장한다.


---

### 인터럽트

인터럽트는 **어떤 신호**가 들어왔을 때 **CPU를 잠깐 정지**시키는 것을 말한다. 
IO 디바이스로 인한 인터럽트, 0으로 숫자를 나누는 산술 연산에서의 인터럽트, 프로세스 오류 등으로 발생한다.

인터럽트가 발생되면 인터럽트 핸들러 함수가 모여 있는 인터럽트 벡터로 가서 인터럽트 함수가 실행된다.
인터럽트 간에는 우선순위가 있고 우선순위에 따라 실행되며 인터럽트는 하드웨어 인터럽트, 소프트웨어 인터럽트 두 가지로 나뉜다.

> 인터럽트 핸들러 함수
: 인터럽트가 발생했을 때 이를 핸들링하기 위한 함수. 커널 내부의 IRQ를 통해 호출된다.
> 
- 하드웨어 인터럽트
    
    IO 디바이스에서 발생하는 인터럽트
    
- 소프트웨어 인터럽트
    
    트랩(trap)이라고도 한다. 프로세스 오류 등으로 프로세스가 시스템콜을 호출할 때 발동한다.
    

---

### DMA 컨트롤러

DMA, Direct Memory Access

CPU의 개입 없이 I/O 디바이스와 메모리 간에 데이터를 직접 전송할 수 있도록 해주는 하드웨어 장치이다. 
이는 CPU의 부하를 줄이고, 시스템의 전체 성능을 향상시킬 수 있다.

CPU가 데이터 전송 작업에 시간을 소모하지 않도록 하여, 다른 작업을 수행할 수 있게 한다.

많은 인터럽트 요청이 오면 CPU가 멈추기 때문에

또한, 하나의 작업을 CPU와 DMA 컨트롤러가 동시에 하는 것을 방지한다.

> **CPU의 역할**은 DMA 초기 설정과 전송 완료 인터럽트 처리에 주로 국한됩니다.
> 
> 
> **DMA의 기본 개념**은 CPU의 개입 없이 데이터를 메모리와 I/O 장치 간에 직접 전송하는 것입니다.
> 
> **버스 사용**은 DMA 전송 모드에 따라 달라지며, CPU가 항상 버스를 양보해야 하는 것은 아닙니다. 효율적인 모드를 사용하면 CPU와 버스를 공유할 수 있습니다.
> 

### 메모리

전자회로에서 데이터나 상태, 명령어 등을 **기록**하는 장치. 보통 **RAM**(Random Access Memory)을 일컬어 메모리라고도 한다.  CPU는 계산을 담당하고, 메모리는 기억을 담당한다.

공장에 비유하면 CPU는 일꾼이고 메모리는 작업장이다. 작업장의 크기가 곧 메모리의 크기로, 작업장이 클수록 창고에서 물건을 많이 가져다놓고 많은 일을 할 수 있듯이 **메모리가 크면 클수록 많은 일을 동시에 할 수 있다.**

### 타이머

몇 초 안에 작업이 끝나야 한다는 것을 정하고 특정 프로그램에 시간 제한을 다는 역할을 한다. 

시간이 많이 걸리는 프로그램이 작동할 때 제한을 걸기 위해 존재한다.

### 디바이스 컨트롤러

컴퓨터와 연결되어 있는 **IO 디바이스들의 작은 CPU**를 말하고, 옆에 붙어 있는 **로컬 버퍼**는 각 디바이스에서 데이터를 임시로 저장하기 위한 작은 메모리를 뜻한다.
